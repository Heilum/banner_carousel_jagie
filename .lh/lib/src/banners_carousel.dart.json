{
    "sourceFile": "lib/src/banners_carousel.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759052044915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759052080616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+import 'package:banner_carousel/banner_carousel.dart';\n+import 'package:flutter/material.dart';\n+\n+import 'banner_widget.dart';\n+import 'indicators_widget.dart';\n+\n+/// Creates a horizontal scrollable list that works from an explicit\n+/// [PageView] of BannerModel or Widget.\n+///\n+/// Along with a row of indicators and as an animation for each page change.\n+class BannerCarousel extends StatefulWidget {\n+  static const IndicatorModel _indicatorModel =\n+      IndicatorModel.animation(width: 10, height: 10, spaceBetween: 3.0);\n+\n+  /// [banners] List of BannerModel.\n+  /// The [imagePath] can be assert Path or Network Path\n+  ///\n+  /// List banners = [\n+  ///     BannerModel(imagePath: '/assets/banner1.png', id: \"1\"),\n+  ///     BannerModel(imagePath: '\"https://picjumbo.com/wp-content/uploads/the-golden-gate-bridge-sunset-1080x720.jpg\"', id: \"2\"),\n+  /// ]\n+  final List<BannerModel>? banners;\n+\n+  /// [animation] teh indicator.\n+  /// Default value [true]\n+  final bool animation;\n+\n+  /// [indicatorBottom]\n+  ///\n+  /// if the IndicatorRow gonna be Bottom of the carousel = true\n+  ///\n+  /// IndicatorRow superimposed on carousel = false\n+  ///\n+  /// Default value [true]\n+  final bool indicatorBottom;\n+\n+  final bool showIndicator;\n+\n+  /// The [height] is banner carousel height.\n+  ///\n+  /// Default value [150]\n+  final double height;\n+\n+  /// The [width] is banner carousel height.\n+  ///\n+  /// Default value [double.maxFinite]\n+  ///\n+  /// In the FullScreen Carousel this field is not available\n+  final double width;\n+\n+  /// Default value [0]\n+  final int initialPage;\n+\n+  /// The fraction of the viewport that each page should occupy.\n+  ///\n+  /// Defaults to 1.0, which means each page fills the viewport in the scrolling\n+  /// direction.\n+  final double viewportFraction;\n+\n+  /// Default value [5]\n+  ///\n+  ///  In fullscreen is [0]\n+  final double borderRadius;\n+\n+  /// The [margin] around the component.\n+  ///\n+  /// Default value [EdgeInsets.symmetric(horizontal: 16.0)]\n+  final EdgeInsetsGeometry? margin;\n+\n+  /// Default value [Color(0xFF10306D)]\n+  final Color? activeColor;\n+\n+  /// Default value [Color(0xFFC4C4C4)]\n+  final Color? disableColor;\n+\n+  /// Default value [IndicatorModel.animation(width: 10, height: 10, spaceBetween: 3.0)]\n+  final IndicatorModel customizedIndicators;\n+\n+  /// Called whenever the page in the center of the viewport changes.\n+  /// Return a [int]\n+  final ValueChanged<int>? onPageChanged;\n+\n+  /// Called whenever the Banner is Tap.\n+  final Function(String id)? onTap;\n+\n+  ///When you need to create your own Widget banners\n+  final List<Widget>? customizedBanners;\n+\n+  /// Margin between the banner\n+  final double spaceBetween;\n+\n+  /// Margin between the banner\n+  final PageController? pageController;\n+\n+  /// ```dart\n+  ///  BannersCarousel(banners: BannerImages.listBanners)\n+  /// ```\n+  const BannerCarousel({\n+    Key? key,\n+    this.banners,\n+    this.height = 150,\n+    this.borderRadius = 5,\n+    this.width = double.maxFinite,\n+    this.margin,\n+    this.indicatorBottom = true,\n+    this.showIndicator = true,\n+    this.disableColor,\n+    this.onTap,\n+    this.viewportFraction = 1.0,\n+    this.onPageChanged,\n+    this.initialPage = 0,\n+    this.activeColor,\n+    this.animation = true,\n+    this.customizedIndicators = _indicatorModel,\n+    this.customizedBanners,\n+    this.spaceBetween = 0,\n+    this.pageController,\n+  })  : assert(banners != null || customizedBanners != null,\n+            'banners or customizedBanners need to be implemented'),\n+        assert(\n+            banners == null || customizedBanners == null,\n+            'Cannot provide both a banners and a customizedBanners\\n'\n+            'Choose only one to implement'),\n+        super(key: key);\n+\n+  ///\n+  /// ```dart\n+  /// BannersCarousel.fullScreen(banners: BannerImages.listBanners),\n+  /// ```\n+  const BannerCarousel.fullScreen({\n+    Key? key,\n+    this.banners,\n+    this.height = 150,\n+    this.borderRadius = 0,\n+    this.viewportFraction = 1.0,\n+    this.initialPage = 0,\n+    this.disableColor,\n+    this.onPageChanged,\n+    this.indicatorBottom = true,\n+    this.onTap,\n+    this.showIndicator = true,\n+    this.activeColor,\n+    this.animation = true,\n+    this.customizedBanners,\n+    this.customizedIndicators = _indicatorModel,\n+    this.pageController,\n+  })  : this.width = double.maxFinite,\n+        this.spaceBetween = 0.0,\n+        this.margin = EdgeInsets.zero,\n+        assert(banners != null || customizedBanners != null,\n+            'banners or customizedBanners need to be implemented'),\n+        assert(\n+            banners == null || customizedBanners == null,\n+            'Cannot provide both a banners and a customizedBanners\\n'\n+            'Choose only one to implement'),\n+        super(key: key);\n+\n+  @override\n+  _BannerCarouselState createState() => _BannerCarouselState();\n+}\n+\n+class _BannerCarouselState extends State<BannerCarousel> {\n+  late int _page;\n+\n+  @override\n+  void initState() {\n+    _page = widget.initialPage;\n+    super.initState();\n+  }\n+\n+  /// Shadow Banner\n+  bool get _showShadow =>\n+      widget.viewportFraction == 1 && widget.customizedBanners == null;\n+  Color get _shadowColor => Colors.black.withOpacity(_showShadow ? 0.25 : 0.0);\n+\n+  Color get _activeColor => widget.activeColor ?? Color(0xFF10306D);\n+  Color get _disableColor => widget.disableColor ?? Color(0xFFC4C4C4);\n+\n+  List<dynamic> get _banners => widget.customizedBanners ?? widget.banners!;\n+\n+  List<Widget> get _listBanners =>\n+      widget.customizedBanners ??\n+      widget.banners!\n+          .map((banner) => BannerWidget(\n+                key: Key(\"Banner${banner.id}\"),\n+                bannerModel: banner,\n+                spaceBetween: widget.spaceBetween,\n+                onTap: widget.onTap != null\n+                    ? () => widget.onTap!(banner.id)\n+                    : () => print(\"Double Tap Banner ${banner.id}\"),\n+                borderRadius: widget.borderRadius,\n+              ))\n+          .toList();\n+\n+  List<Widget> get rowIndicator => _banners\n+      .asMap()\n+      .entries\n+      .map((e) => CarouselIndicatorWidget(\n+            key: Key(\"Indicator${e.key}\"),\n+            active: _page == e.key,\n+            color: _page == e.key ? _activeColor : _disableColor,\n+            animation: widget.animation,\n+            sizeIndicator: widget.customizedIndicators,\n+          ))\n+      .toList();\n+\n+  double get _totalHeigth => widget.indicatorBottom && widget.showIndicator\n+      ? widget.height + widget.customizedIndicators.heightExpanded + 15\n+      : widget.height;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Container(\n+      height: _totalHeigth,\n+      width: widget.width,\n+      margin: widget.margin ?? EdgeInsets.symmetric(horizontal: 16.0),\n+      child: Stack(\n+        children: [\n+          Container(\n+            //Jagie\n+            // decoration: _boxDecoration,\n+            height: widget.height,\n+            child: PageView(\n+              controller: widget.pageController ??\n+                  PageController(\n+                      initialPage: widget.initialPage,\n+                      viewportFraction: widget.viewportFraction),\n+              onPageChanged: (index) => _onChangePage(index),\n+              children: _listBanners,\n+            ),\n+          ),\n+          widget.showIndicator ? _indicatorRow : SizedBox()\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Align get _indicatorRow => Align(\n+        alignment: Alignment.bottomCenter,\n+        child: Padding(\n+          padding: EdgeInsets.all(8.0),\n+          child: Row(\n+            mainAxisAlignment: MainAxisAlignment.center,\n+            children: rowIndicator,\n+          ),\n+        ),\n+      );\n+\n+  BoxDecoration get _boxDecoration => BoxDecoration(\n+        boxShadow: [\n+          BoxShadow(\n+            color: _shadowColor,\n+            spreadRadius: 0,\n+            blurRadius: 4,\n+            offset: Offset(0, 3),\n+          ),\n+        ],\n+      );\n+\n+  /// Method for when to change the page\n+  /// returning an integer value\n+  void _onChangePage(int index) {\n+    if (widget.onPageChanged != null) {\n+      widget.onPageChanged!(index);\n+    }\n+    setState(() => _page = index);\n+  }\n+}\n"
                }
            ],
            "date": 1759052044915,
            "name": "Commit-0",
            "content": "import 'package:banner_carousel/banner_carousel.dart';\nimport 'package:flutter/material.dart';\n\nimport 'banner_widget.dart';\nimport 'indicators_widget.dart';\n\n/// Creates a horizontal scrollable list that works from an explicit\n/// [PageView] of BannerModel or Widget.\n///\n/// Along with a row of indicators and as an animation for each page change.\nclass BannerCarousel extends StatefulWidget {\n  static const IndicatorModel _indicatorModel =\n      IndicatorModel.animation(width: 10, height: 10, spaceBetween: 3.0);\n\n  /// [banners] List of BannerModel.\n  /// The [imagePath] can be assert Path or Network Path\n  ///\n  /// List banners = [\n  ///     BannerModel(imagePath: '/assets/banner1.png', id: \"1\"),\n  ///     BannerModel(imagePath: '\"https://picjumbo.com/wp-content/uploads/the-golden-gate-bridge-sunset-1080x720.jpg\"', id: \"2\"),\n  /// ]\n  final List<BannerModel>? banners;\n\n  /// [animation] teh indicator.\n  /// Default value [true]\n  final bool animation;\n\n  /// [indicatorBottom]\n  ///\n  /// if the IndicatorRow gonna be Bottom of the carousel = true\n  ///\n  /// IndicatorRow superimposed on carousel = false\n  ///\n  /// Default value [true]\n  final bool indicatorBottom;\n\n  final bool showIndicator;\n\n  /// The [height] is banner carousel height.\n  ///\n  /// Default value [150]\n  final double height;\n\n  /// The [width] is banner carousel height.\n  ///\n  /// Default value [double.maxFinite]\n  ///\n  /// In the FullScreen Carousel this field is not available\n  final double width;\n\n  /// Default value [0]\n  final int initialPage;\n\n  /// The fraction of the viewport that each page should occupy.\n  ///\n  /// Defaults to 1.0, which means each page fills the viewport in the scrolling\n  /// direction.\n  final double viewportFraction;\n\n  /// Default value [5]\n  ///\n  ///  In fullscreen is [0]\n  final double borderRadius;\n\n  /// The [margin] around the component.\n  ///\n  /// Default value [EdgeInsets.symmetric(horizontal: 16.0)]\n  final EdgeInsetsGeometry? margin;\n\n  /// Default value [Color(0xFF10306D)]\n  final Color? activeColor;\n\n  /// Default value [Color(0xFFC4C4C4)]\n  final Color? disableColor;\n\n  /// Default value [IndicatorModel.animation(width: 10, height: 10, spaceBetween: 3.0)]\n  final IndicatorModel customizedIndicators;\n\n  /// Called whenever the page in the center of the viewport changes.\n  /// Return a [int]\n  final ValueChanged<int>? onPageChanged;\n\n  /// Called whenever the Banner is Tap.\n  final Function(String id)? onTap;\n\n  ///When you need to create your own Widget banners\n  final List<Widget>? customizedBanners;\n\n  /// Margin between the banner\n  final double spaceBetween;\n\n  /// Margin between the banner\n  final PageController? pageController;\n\n  /// ```dart\n  ///  BannersCarousel(banners: BannerImages.listBanners)\n  /// ```\n  const BannerCarousel({\n    Key? key,\n    this.banners,\n    this.height = 150,\n    this.borderRadius = 5,\n    this.width = double.maxFinite,\n    this.margin,\n    this.indicatorBottom = true,\n    this.showIndicator = true,\n    this.disableColor,\n    this.onTap,\n    this.viewportFraction = 1.0,\n    this.onPageChanged,\n    this.initialPage = 0,\n    this.activeColor,\n    this.animation = true,\n    this.customizedIndicators = _indicatorModel,\n    this.customizedBanners,\n    this.spaceBetween = 0,\n    this.pageController,\n  })  : assert(banners != null || customizedBanners != null,\n            'banners or customizedBanners need to be implemented'),\n        assert(\n            banners == null || customizedBanners == null,\n            'Cannot provide both a banners and a customizedBanners\\n'\n            'Choose only one to implement'),\n        super(key: key);\n\n  ///\n  /// ```dart\n  /// BannersCarousel.fullScreen(banners: BannerImages.listBanners),\n  /// ```\n  const BannerCarousel.fullScreen({\n    Key? key,\n    this.banners,\n    this.height = 150,\n    this.borderRadius = 0,\n    this.viewportFraction = 1.0,\n    this.initialPage = 0,\n    this.disableColor,\n    this.onPageChanged,\n    this.indicatorBottom = true,\n    this.onTap,\n    this.showIndicator = true,\n    this.activeColor,\n    this.animation = true,\n    this.customizedBanners,\n    this.customizedIndicators = _indicatorModel,\n    this.pageController,\n  })  : this.width = double.maxFinite,\n        this.spaceBetween = 0.0,\n        this.margin = EdgeInsets.zero,\n        assert(banners != null || customizedBanners != null,\n            'banners or customizedBanners need to be implemented'),\n        assert(\n            banners == null || customizedBanners == null,\n            'Cannot provide both a banners and a customizedBanners\\n'\n            'Choose only one to implement'),\n        super(key: key);\n\n  @override\n  _BannerCarouselState createState() => _BannerCarouselState();\n}\n\nclass _BannerCarouselState extends State<BannerCarousel> {\n  late int _page;\n\n  @override\n  void initState() {\n    _page = widget.initialPage;\n    super.initState();\n  }\n\n  /// Shadow Banner\n  bool get _showShadow =>\n      widget.viewportFraction == 1 && widget.customizedBanners == null;\n  Color get _shadowColor => Colors.black.withOpacity(_showShadow ? 0.25 : 0.0);\n\n  Color get _activeColor => widget.activeColor ?? Color(0xFF10306D);\n  Color get _disableColor => widget.disableColor ?? Color(0xFFC4C4C4);\n\n  List<dynamic> get _banners => widget.customizedBanners ?? widget.banners!;\n\n  List<Widget> get _listBanners =>\n      widget.customizedBanners ??\n      widget.banners!\n          .map((banner) => BannerWidget(\n                key: Key(\"Banner${banner.id}\"),\n                bannerModel: banner,\n                spaceBetween: widget.spaceBetween,\n                onTap: widget.onTap != null\n                    ? () => widget.onTap!(banner.id)\n                    : () => print(\"Double Tap Banner ${banner.id}\"),\n                borderRadius: widget.borderRadius,\n              ))\n          .toList();\n\n  List<Widget> get rowIndicator => _banners\n      .asMap()\n      .entries\n      .map((e) => CarouselIndicatorWidget(\n            key: Key(\"Indicator${e.key}\"),\n            active: _page == e.key,\n            color: _page == e.key ? _activeColor : _disableColor,\n            animation: widget.animation,\n            sizeIndicator: widget.customizedIndicators,\n          ))\n      .toList();\n\n  double get _totalHeigth => widget.indicatorBottom && widget.showIndicator\n      ? widget.height + widget.customizedIndicators.heightExpanded + 15\n      : widget.height;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      height: _totalHeigth,\n      width: widget.width,\n      margin: widget.margin ?? EdgeInsets.symmetric(horizontal: 16.0),\n      child: Stack(\n        children: [\n          Container(\n            //Jagie\n            // decoration: _boxDecoration,\n            height: widget.height,\n            child: PageView(\n              controller: widget.pageController ??\n                  PageController(\n                      initialPage: widget.initialPage,\n                      viewportFraction: widget.viewportFraction),\n              onPageChanged: (index) => _onChangePage(index),\n              children: _listBanners,\n            ),\n          ),\n          widget.showIndicator ? _indicatorRow : SizedBox()\n        ],\n      ),\n    );\n  }\n\n  Align get _indicatorRow => Align(\n        alignment: Alignment.bottomCenter,\n        child: Padding(\n          padding: EdgeInsets.all(8.0),\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: rowIndicator,\n          ),\n        ),\n      );\n\n  BoxDecoration get _boxDecoration => BoxDecoration(\n        boxShadow: [\n          BoxShadow(\n            color: _shadowColor,\n            spreadRadius: 0,\n            blurRadius: 4,\n            offset: Offset(0, 3),\n          ),\n        ],\n      );\n\n  /// Method for when to change the page\n  /// returning an integer value\n  void _onChangePage(int index) {\n    if (widget.onPageChanged != null) {\n      widget.onPageChanged!(index);\n    }\n    setState(() => _page = index);\n  }\n}\n"
        }
    ]
}